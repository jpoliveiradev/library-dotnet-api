// <auto-generated />
using System;
using Library.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220925161412_initMysql")]
    partial class initMysql
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Library.API.Models.Admins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NomeAdmin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jp123@gmail.com",
                            Endereco = "Rua A Cascavel",
                            NomeAdmin = "JP Souza",
                            Password = "jp1234",
                            UserName = "jpsouza"
                        },
                        new
                        {
                            Id = 2,
                            Email = "art123@gmail.com",
                            Endereco = "Rua A Cascavel",
                            NomeAdmin = "Arthur",
                            Password = "jp1234",
                            UserName = "jpsouza"
                        });
                });

            modelBuilder.Entity("Library.API.Models.Alugueis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAluguel")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataDevolucao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataPrevisao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("LivroId");

                    b.ToTable("Alugueis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 2,
                            DataAluguel = new DateTime(2010, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataDevolucao = new DateTime(2010, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevisao = new DateTime(2010, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LivroId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 3,
                            DataAluguel = new DateTime(2015, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataDevolucao = new DateTime(2015, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevisao = new DateTime(2015, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LivroId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 1,
                            DataAluguel = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataDevolucao = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataPrevisao = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LivroId = 3
                        });
                });

            modelBuilder.Entity("Library.API.Models.Clientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Endereco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NomeUsuario")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cidade = "Cascavel",
                            Email = "Artur@gmail.com",
                            Endereco = "Rua A",
                            NomeUsuario = "Artur"
                        },
                        new
                        {
                            Id = 2,
                            Cidade = "Caucaia",
                            Email = "Ana@gmail.com",
                            Endereco = "Rua T",
                            NomeUsuario = "Ana"
                        },
                        new
                        {
                            Id = 3,
                            Cidade = "São Paulo",
                            Email = "Vilma@gmail.com",
                            Endereco = "Rua K",
                            NomeUsuario = "Vilma"
                        },
                        new
                        {
                            Id = 4,
                            Cidade = "Fortaleza",
                            Email = "Vitor@gmail.com",
                            Endereco = "Rua E",
                            NomeUsuario = "Vitor"
                        });
                });

            modelBuilder.Entity("Library.API.Models.Editoras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cidade")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NomeEditora")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Editoras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cidade = "Cascavel",
                            NomeEditora = "Artur"
                        },
                        new
                        {
                            Id = 2,
                            Cidade = "Caucaia",
                            NomeEditora = "Ana"
                        },
                        new
                        {
                            Id = 3,
                            Cidade = "São Paulo",
                            NomeEditora = "Vilma"
                        },
                        new
                        {
                            Id = 4,
                            Cidade = "Fortaleza",
                            NomeEditora = "Vitor"
                        },
                        new
                        {
                            Id = 5,
                            Cidade = "Fortaleza",
                            NomeEditora = "Caio"
                        },
                        new
                        {
                            Id = 6,
                            Cidade = "Fortaleza",
                            NomeEditora = "Henrique"
                        },
                        new
                        {
                            Id = 7,
                            Cidade = "Fortaleza",
                            NomeEditora = "Laurence"
                        });
                });

            modelBuilder.Entity("Library.API.Models.Livros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Autor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EditoraId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Lancamento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NomeLivro")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("QuantAlugado")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditoraId");

                    b.ToTable("Livros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Autor = "Navathe",
                            EditoraId = 2,
                            Lancamento = new DateTime(2010, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomeLivro = "Banco de Dados",
                            QuantAlugado = 0,
                            Quantidade = 10
                        },
                        new
                        {
                            Id = 2,
                            Autor = "Deitel",
                            EditoraId = 3,
                            Lancamento = new DateTime(2015, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomeLivro = "Java Prático",
                            QuantAlugado = 0,
                            Quantidade = 10
                        },
                        new
                        {
                            Id = 3,
                            Autor = "Elephant",
                            EditoraId = 1,
                            Lancamento = new DateTime(2018, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomeLivro = "Php",
                            QuantAlugado = 0,
                            Quantidade = 7
                        },
                        new
                        {
                            Id = 4,
                            Autor = "Cormen",
                            EditoraId = 4,
                            Lancamento = new DateTime(2016, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomeLivro = "Vue JS",
                            QuantAlugado = 0,
                            Quantidade = 55
                        },
                        new
                        {
                            Id = 5,
                            Autor = "Git",
                            EditoraId = 5,
                            Lancamento = new DateTime(2020, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomeLivro = "GitHub",
                            QuantAlugado = 0,
                            Quantidade = 5
                        },
                        new
                        {
                            Id = 6,
                            Autor = "Café",
                            EditoraId = 6,
                            Lancamento = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomeLivro = "JavaScript",
                            QuantAlugado = 0,
                            Quantidade = 22
                        },
                        new
                        {
                            Id = 7,
                            Autor = "Algoritmo",
                            EditoraId = 7,
                            Lancamento = new DateTime(2022, 8, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NomeLivro = "Código Limpo",
                            QuantAlugado = 0,
                            Quantidade = 2
                        });
                });

            modelBuilder.Entity("Library.API.Models.Alugueis", b =>
                {
                    b.HasOne("Library.API.Models.Clientes", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.API.Models.Livros", "Livro")
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.API.Models.Livros", b =>
                {
                    b.HasOne("Library.API.Models.Editoras", "Editora")
                        .WithMany()
                        .HasForeignKey("EditoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
